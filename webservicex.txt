Practical 1
Temperature Converter 

Steps :
1) Create a WebService 
" Write Code "

 @WebMethod(operationName = "fToC")
    public float fToC(@WebParam(name = "a") float a) {
        return ((a - 32) * 5/9);
    }
    
    
    @WebMethod(operationName= "cToF")
    public float cToF(@WebParam(name = "b") float b){
        return((b * 9/5) + 32);
    }
2) Deploy the project 
3) Test the WebService
4) Create a WebService client 
" create a new package for the client "
5) Create a index.html and newjsp.jsp files for creating frontend 
index.html 
        <form action="newjsp.jsp" method="POST">
            Enter Temperature
            <br>
            <input type="text" name="txt" value="">
            <br>
            <input type="submit" value="Convert" name="convert">    
        </form>

newjsp.jsp 
        <%
            // Webservice obj
            tycsclient.NewWebService_Service obj = new tycsclient.NewWebService_Service();
            // Creating a port to the service
            tycsclient.NewWebService port = obj.getNewWebServicePort();
           
            
            String val = request.getParameter("txt");
            float temp = Float.parseFloat(val);
            float result1 = port.cToF(temp);
            float result2 = port.fToC(temp);
            out.println("Celcius to Farhanite :"+ result1);
        %>
        <br>
        <%
            out.println("Farhan to Celcius :"+ result2);
        %>
6) Run and Done ;)


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Practical 2
a) Aritmetic Operation 



b) Fetch Weather Report 




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Practical ? 
Web Service to insert student record in database (one way operation)

Steps :
0) Create a database "studentdb" in mysql 
- code 

create database studentdb;
use studentdb;
create table student(sname varchar(20), srollno varchar(20), sclass varchar(20));

1) Create New WebService
    - name it "insertrecord" package name  "ty"
2) Add JAR file for mysql-connector to "Libraries" folder
3) Add Code in "insertrecord.java"

    public String StudentRecord(@WebParam(name = "sname") String sname, @WebParam(name = "srollno") String srollno, @WebParam(name = "sclass") String sclass) {
        //TODO write your implementation code here:
        try{
            Class.forName("com.mysql.cj.jdbc");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/studentdb", "root", "mysql");
            PreparedStatement stmt = conn.prepareStatement("insert into student values(?,?,?)");
            stmt.setString(1,sname);
            stmt.setString(2,srollno);
            stmt.setString(3, sclass);
            int i = stmt.executeUpdate();
            conn.close();
            return i + "Record Inserted!";
                 
        }catch(Exception e){
            System.out.println(e);
            return e.toString() + "Error";
        }
    }

4) Compile and Deploy the project 
5) Create 2 files "index.jsp" and "indexaction.jsp"

index.jsp

    <center>
        <h1>Student's Record</h1>
            <form action="indexaction.jsp" method="POST">
                Enter Name: <input type="text" name="sname" value="" /><br>
                Enter RollNo.: <input type="text" name="sroll" value="" /><br>
                Enter Class: <input type="text" name="sclass" value="" /><br>
                <input type="submit" value="Submit" />
            </form>
    </center>

indexaction.jsp

    <%
        tycs.Insertrecord_Service obj=new tycs.Insertrecord_Service(); // obj of service
        tycs.Insertrecord port=obj.getInsertrecordPort(); // port for service 
        String sname = request.getParameter("sname"); //took input1
        String sroll = request.getParameter("sroll"); //took input2
        String sclass = request.getParameter("sclass"); //took input3
        String res = port.StudentRecord(sname, sroll, sclass); //inserting values by insert method
        out.println("Result: "+res);
    %>


6) Run and Done ;)


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Practical 7
WCF ajax

1) Create WebForms Application
2) Add WebService (Ajax enabled)

	[OperationContract] //OUR CODE
	public double sum(double a, double b) //OUR CODE
	{
		double result = a + b;
		return result;
	}
3) Right click add "existing item" then add jquery.js file
4) In Default.aspx web form add some code 

- place this inside <body>
    <form id="form1" runat="server">
        <div>
            Enter First Number: <input id="txt1" type="text" /> <br />
            Enter Second Number: <input id="txt2" type="text" /> <br />
            <input id="btn" type="button" value="Add Numbers" /> <br />
            <input id="txt3" type="text" />
        </div>
    </form>

- place this inside <script> tag in head

$(document).ready(function() { //loads the jQuery
    $("#btn").click(function() {
        var num1 = $("#txt1").val(); 
        var num2 = $("#txt2").val(); 
        $.ajax({
            url: "Service1.svc/sum",

            type: "POST",
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify({
                a: num1,
                b: num2
            }),

            dataType: "json",
            success: function(data) {
                $("#txt3").val(data.d);
            }, 
            error: function(err) {
                alert(err);
            }
        });
    });
});

5) Run Default.aspx and done ;)

-----------------------------------------------------------------------------------------------------------------------------------------

Practical 4
Restfull Webservice student table CRUD 

1) Create a Web Application (netbeans)
2) Create a database connection 
    Navigate to Services tab > Databases > Drivers > right-click over MySQL(Connector/J driver)
    > click Connect Using... > Database: (change “mysql” to “p6”) & Password: (root) & click Test
    Connection > Finish.
3) Create an Entity class 
    Class Name: (student) & Package: (tycs) > Next >
    Data Source: (select New Data Source... from dropdown) >
    JNDI Name: (ANYNAME) &
    Database Connection: (select your db connection string from dropdown) > OK > Finish >

4) Add some code in Entity Class 
    Right-click > Insert Code... > Add Property... > Name: (sname) > OK.
    Right-click > Insert Code... > Add Property... > Name: (sclass) > OK.

5) Create "RestFul Web service from entity class"
6) Create JSF pages from entity class 
7) Perform CRUD operations 
 
